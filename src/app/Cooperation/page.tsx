"use client"
import React, { useState } from 'react'
import  {SubmitHandler}  from "react-hook-form";

export default function Cooparation() {


  const [files, setFiles] = useState<File[]>();


  const [isSubmitting, setIsSubmitting] = useState(false);
  const [openSuccessModal, setOpenSuccessModal] = useState(false);

  const handleSendForm = async (data :any) => {
    setIsSubmitting(true);
    const text =
      `–ü—Ä–∏–≤—ñ—Ç, –õ—é–¥–º–∏–ª–æ!üôå\n` +
      `–ù–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.ü§ë\n` +
      `üìö–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞: ${data.subject}\n` +
      `üìñ–¢–∏–ø —Ä–æ–±–æ—Ç–∏: ${data.workType}\n` +
      `üïí–¢–µ—Ä–º—ñ–Ω: ${data.term}\n` +
      `üìßE-mail: ${data.email}\n` +
      `‚ÅâÔ∏è–¢–µ–º–∞ —Ä–æ–±–æ—Ç–∏: ${data.topic}\n` +
      `üì±–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n` +
      `‚ú®–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏: ${data.uniqueness}%\n` +
      `‚úçÔ∏è–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫: ${data.pages} —Å—Ç.\n` +
      `‚ûï–î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–º–æ–≥–∏: ${
        data.requirements ? data.requirements : "–ü–æ–∫–∏ –Ω–µ–º–∞—î"
      }`;
    const body = {
      chat_id: process.env.REACT_APP_CHAT_ID,
      text,
    };
    try {
      const result = await (
        await fetch(
          `https://api.telegram.org/bot${process.env.REACT_APP_TELEGRAM_BOT_TOKEN}/sendMessage`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
          }
        )
      ).json();
      if (files) {
        if (result.ok === true) {
          if (!files || files.length === 0) {
            setOpenSuccessModal(true);
            setTimeout(function () {
              window.location.reload();
            }, 2000);
            return;
          }
          for (const file of files) {
            const form = new FormData();
            form.append("document", file);
            form.append("chat_id", process.env.REACT_APP_CHAT_ID!);
            form.append("reply_to_message_id", result.result.message_id);
            await fetch(
              `https://api.telegram.org/bot${process.env.REACT_APP_TELEGRAM_BOT_TOKEN}/sendDocument`,
              {
                method: "POST",
                body: form,
              }
            );
          }
        }
        setOpenSuccessModal(true);
        setTimeout(function () {
          window.location.reload();
        }, 2000);
      }
    } catch (error) {
      alert("ERROR");
    } finally {
      setIsSubmitting(false);
    }
  };
  return  (<div className="App">
  <h1>–°–ø—ñ–≤–ø—Ä–∞—Ü—è</h1>
  <p>–ó–∞–ª–∏—à—Ç–µ –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ, —ñ –º–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è:</p>
  <form  /* action="telegram.ts" */ method='post' onSubmit={handleSendForm} >
    <label>
      –Ü–º'—è:
      <input type="text" name="name" /* onChange={(e) => setName(e.target.value)} */ />
    </label>
    <br />
    <label>
      –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞:
      <input type="email" name="email"/*  onChange={(e) => setEmail(e.target.value)} */ />
    </label>
    <br />
    <label>
      –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
      <textarea name={"message"} /* onChange={(e) => setMessage(e.target.value)}  *//>
    </label>
    <br />
    <button type="submit">–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</button>
  </form>
  <div>
    <h2>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ</h2>
    <p>–¢–µ–ª–µ—Ñ–æ–Ω: +1 23 456 7890</p>
    <p>Email: example@example.com</p>
  </div>
</div>
);
}
